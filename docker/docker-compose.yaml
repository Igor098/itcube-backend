services:
  cube-pg-db:
    image: postgres:latest
    container_name: cube-pg-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    command: > 
      sh -c "redis-server --requirepass $REDIS_PASSWORD"
    volumes:
      - redis_data:/data
    networks:
      - backend

  minio_cube:
    image: minio/minio:latest  
    container_name: minio_cube
    restart: always
    ports:
      - 9000:9000
      - 9001:9001 
    volumes:  
      - minio_storage:/data  
      - minio_config:/root/.minio  
    environment:  
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}  
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"  
    healthcheck:  
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]  
      interval: 30s  
      timeout: 20s  
      retries: 3
    networks:
      - backend

volumes:
  pgdata:
  redis_data:
  minio_storage:
  minio_config:

networks:
  backend:

